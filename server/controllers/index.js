// Generated by CoffeeScript 1.3.3
(function() {
  var ContentsModel, categories, category, catename, catetotal, contents_model, getCategoiesHandler, getpagination, init, operator, operatortotal, page, pageno, pagesize, pagetotal, pagination, state;

  pagination = require('node-pagination');

  contents_model = require('../model/contents-model');

  ContentsModel = contents_model.ContentsModel;

  category = require('./category');

  pagesize = 5;

  pageno = 1;

  pagetotal = -1;

  catetotal = -1;

  categories = null;

  catename = null;

  operator = null;

  operatortotal = -1;

  state = null;

  exports.init = init = function(req, res) {
    var random;
    random = require('../libs/random').random;
    console.log('req.params.page = ' + req.params.page);
    pageno = req.params.page != undefined ? req.params.page : 1;
    state = 'index';
    contents_model.once(random + '_contents_count_success', function(result) {
      console.log('-- _contents_count_success --');
      pagetotal = result;
      return page(req, res, pagetotal, pageno);
    });
    contents_model.once(random + '_contents_count_error', function(err) {
      return console.log('_contents_count_error = ' + err);
    });
    return contents_model.count(ContentsModel, {}, random);
  };

  exports.category = function(req, res) {
    var random;
    random = require('../libs/random').random;
    state = 'category';
    if (req.params.catename === void 0) {
      res.redirect('/');
    } else if (req.params.catename !== void 0 && req.params.catename !== catename) {
      catename = req.params.catename;
    }
    console.log('catetotal ============ ' + catetotal);
    console.log('catename ============= ' + catename);
    pageno = req.params.page != undefined ? req.params.page : 1;
    contents_model.once(random + '_contents_countcatename_success', function(result) {
      console.log('_contents_countcatename_success =' + result + '|');
      catetotal = result;
      return page(req, res, catetotal, pageno);
    });
    contents_model.once(random + '_contents_countcatename_error', function(err) {
      return console.log('_contents_countcatename_error = ' + err);
    });
    return contents_model.countCatename(ContentsModel, catename, random);
  };

  exports.operator = function(req, res) {
    var random;
    random = require('../libs/random').random;
    state = 'operator';
    if (req.params.operator === void 0) {
      res.redirect('/');
    } else if (req.params.operator !== void 0 && req.params.operator !== operator) {
      operator = req.params.operator;
      operatortotal = -1;
    }
    console.log('operatortotal ============ ' + operatortotal);
    console.log('operator      ============= ' + operator);
    pageno = req.params.page != undefined ? req.params.page : 1;
    contents_model.once(random + '_contents_countoperator_success', function(result) {
      console.log('_contents_countoperator_success =' + result + '|');
      operatortotal = result;
      return page(req, res, operatortotal, pageno);
    });
    contents_model.once(random + '_contents_countoperator_error', function(err) {
      return console.log('_contents_countoperator_error = ' + err);
    });
    if (operatortotal === -1) {
      return contents_model.countOperator(ContentsModel, operator, random);
    } else {
      return page(req, res, operatortotal, pageno);
    }
  };

  page = function(req, res, total, pageno) {
    var pv, query, random;
    random = require('../libs/random').random;
    pv = getpagination(total, pageno);
    contents_model.once(random + '_contents_findall_success', function(result) {
      var obj;
      obj = {
        contents: result,
        pv: pv
      };
      return category.getcategoies(req, res, obj, getCategoiesHandler);
    });
    contents_model.once(random + '_contents_findall_error', function(err) {
      return console.log('_contents_findall_error = ' + err);
    });
    if (state === 'index') {
      query = {};
    } else if (state === 'category') {
      query = {
        catename: catename
      };
    } else if (state === 'operator') {
      query = {
        username: operator
      };
    }
    return contents_model.findAll(ContentsModel, query, pageno, pagesize, random);
  };

  getCategoiesHandler = function(req, res, obj, result) {
    categories = result;
    return res.render('front/index', {
      contents: obj.contents,
      pv: obj.pv,
      categories: categories,
      state: state
    });
  };

  getpagination = function(total, pageno) {
    return pagination.build(total, pageno, pagesize, 0, pagesize);
  };

  exports.detail = function(req, res) {
    var random, url;
    random = require('../libs/random').random;
    state = 'detail';
    url = req.params.url != undefined ? req.params.url : res.redirect('/');
    contents_model.once(random + '_contents_findurl_success', function(result) {
      console.log('_contents_findurl_success =' + result + '|');
      if (categories === null) {
        return category.getcategoies(req, res, result, function(req, res, obj, result) {
          categories = result;
          return res.render('front/detail', {
            content: obj,
            categories: categories
          });
        });
      } else {
        return res.render('front/detail', {
          content: result,
          categories: categories
        });
      }
    });
    contents_model.once(random + '_contents_findurl_error', function(err) {
      return console.log('_contents_findurl_error = ' + err);
    });
    return contents_model.findURL(ContentsModel, url, random);
  };

}).call(this);

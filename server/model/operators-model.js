// Generated by CoffeeScript 1.3.3
(function() {
  var OperatorsModel, events, exports, services, vo;

  services = require('mongoose');

  vo = require('./vo/operators');

  events = require('events');

  exports = module.exports = new events.EventEmitter();

  exports.OperatorsModel = OperatorsModel = services.model('c-operators', vo.OperatorsSchema);

  exports.find = function(obj, query, radom) {
    return obj.findOne({
      'username': query.username.toLowerCase(),
      'password': query.password.toLowerCase()
    }, function(err, operators) {
      if (!err) {
        return exports.emit(radom + '_operators_signin_success', operators === null ? operators : vo.obj2json(operators));
      } else {
        return exports.emit(radom + '_operators_signin_error', err);
      }
    });
  };

  exports.findAll = function(obj, radom) {
    var query;
    query = obj.find({});
    query.sort('cdate', 1);
    return query.exec(function(err, operators) {
      if (!err) {
        return exports.emit(radom + '_operators_findall_success', operators);
      } else {
        return exports.emit(radom + '_operators_findall_error', err);
      }
    });
  };

  exports.findUsername = function(obj, username, radom) {
    return obj.findOne({
      'username': username.toLowerCase()
    }, function(err, operators) {
      if (!err) {
        return exports.emit(radom + '_operators_findusername_success', operators);
      } else {
        return exports.emit(radom + '_operators_findusername_error', err);
      }
    });
  };

  exports.add = function(obj, radom) {
    return obj.save(function(err) {
      if (!err) {
        return exports.emit(radom + '_operators_add_success', null);
      } else {
        return exports.emit(radom + '_operators_add_error', err);
      }
    });
  };

  exports.save = function(obj, username, updates, random) {
    var conditions, options;
    conditions = {
      username: username
    };
    updates = {
      $set: updates
    };
    options = {
      multi: true
    };
    return obj.update(conditions, updates, options, function(err) {
      if (!err) {
        return exports.emit(random + '_operators_save_success', 'succeess');
      } else {
        return exports.emit(random + '_operators_save_error', err);
      }
    });
  };

  exports["delete"] = function(obj, username, random) {
    return obj.findOne({
      'username': username
    }, function(err, operator) {
      if (!err) {
        operator.remove();
        return operator.save(function(err) {
          if (!err) {
            return exports.emit(random + '_operators_delete_success', 'succeess');
          } else {
            return exports.emit(random + '_operators_delete_error', err);
          }
        });
      } else {
        return exports.emit(random + '_operators_delete_error', err);
      }
    });
  };

}).call(this);
